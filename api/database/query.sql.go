// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package database

import (
	"context"
)

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (
  email, password, isVerified
) VALUES (
  $1, $2, $3
)
RETURNING id, email, password, isverified
`

type CreateUserParams struct {
	Email      string
	Password   string
	Isverified bool
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) (User, error) {
	row := db.QueryRowContext(ctx, CreateUser, arg.Email, arg.Password, arg.Isverified)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Isverified,
	)
	return i, err
}

const CreateVerifyData = `-- name: CreateVerifyData :one
INSERT INTO verifyData (
  userId, code
) VALUES (
  $1, $2
)
RETURNING userid, code
`

type CreateVerifyDataParams struct {
	Userid int32
	Code   string
}

func (q *Queries) CreateVerifyData(ctx context.Context, db DBTX, arg CreateVerifyDataParams) (Verifydatum, error) {
	row := db.QueryRowContext(ctx, CreateVerifyData, arg.Userid, arg.Code)
	var i Verifydatum
	err := row.Scan(&i.Userid, &i.Code)
	return i, err
}

const DeleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, db DBTX, id int32) error {
	_, err := db.ExecContext(ctx, DeleteUser, id)
	return err
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, isverified FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, db DBTX, email string) (User, error) {
	row := db.QueryRowContext(ctx, GetUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Isverified,
	)
	return i, err
}

const GetVerificationCode = `-- name: GetVerificationCode :one
SELECT v.userid, v.code FROM verifyData v
INNER JOIN users u on v.userid = u.id
WHERE u.email = $1
`

func (q *Queries) GetVerificationCode(ctx context.Context, db DBTX, email string) (Verifydatum, error) {
	row := db.QueryRowContext(ctx, GetVerificationCode, email)
	var i Verifydatum
	err := row.Scan(&i.Userid, &i.Code)
	return i, err
}

const ListUsers = `-- name: ListUsers :many
SELECT id, email, password, isverified FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context, db DBTX) ([]User, error) {
	rows, err := db.QueryContext(ctx, ListUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Isverified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE users
SET isVerified = $1
WHERE email = $2
RETURNING id, email, password, isverified
`

type UpdateUserParams struct {
	Isverified bool
	Email      string
}

func (q *Queries) UpdateUser(ctx context.Context, db DBTX, arg UpdateUserParams) (User, error) {
	row := db.QueryRowContext(ctx, UpdateUser, arg.Isverified, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Isverified,
	)
	return i, err
}
